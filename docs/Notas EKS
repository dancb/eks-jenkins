Acces Key (mywizard): AKIAUND45NE57MU3BIVU
Secret key (mywizard): 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

####################################################################################
################## AHORA VIENE CONFIG EXCLUSIVA PARA ALB CONTROLLER ################
####################################################################################

0- Configura el contexto:
    eksctl utils write-kubeconfig --cluster eks-cluster-jenkins

1- Configurar OIDC Provider: Asegúrate de que tu clúster tenga un proveedor OIDC habilitado:
    eksctl utils associate-iam-oidc-provider --region us-east-1 --cluster eks-cluster-jenkins --approve

2- Crear la IAM Policy: Descarga la política oficial de permisos y créala en AWS:
    2.1 Crea politica:
        Solo de Referencia: curl -o iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json
        aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam_policy.json
        aws iam create-policy --policy-name CustomLoadBalancerControllerPolicy --policy-document file://iam_policy_custom.json

    2.2 Crea Rol:
        aws iam create-role --role-name ALBIngressControllerRole  --assume-role-policy-document file://trust-policy.json
        aws iam update-assume-role-policy --role-name ALBIngressControllerRole --policy-document file://trust-policy.json

    2.3 Asocia politica al rol:
        aws iam attach-role-policy --role-name ALBIngressControllerRole --policy-arn arn:aws:iam::303057168699:policy/AWSLoadBalancerControllerIAMPolicy
        aws iam attach-role-policy --role-name ALBIngressControllerRole --policy-arn arn:aws:iam::303057168699:policy/CustomLoadBalancerControllerPolicy

3- Crear la IAM Role para el Service Account: Crea el Service Account con la IAM Role asociada:
    3.1- Crea el serviceaccount
        kubectl apply -f configs/serviceaccount-v2.yaml

        Lista Serviceaccounts
        kubectl get serviceaccounts -n kube-system

        Elimina Serviceaccount
        kubectl delete serviceaccount aws-load-balancer-controller -n kube-system

4- Instalar el AWS Load Balancer Controller con Helm: Añade el repositorio de Helm y actualiza:
    helm repo add eks https://aws.github.io/eks-charts
    helm repo update

    * El VPC-ID se puede obtener asi: 
        aws eks describe-cluster --name eks-cluster-jenkins --query "cluster.resourcesVpcConfig.vpcId" --output text

    
5- Instalar el controller con Helm
    6.1- Obten la vpc del cluster:
        aws eks describe-cluster --name eks-cluster-jenkins --query "cluster.resourcesVpcConfig.vpcId" --output text

    6.2 Instalar controlador con eksctl:
        helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
        -n kube-system \
        --set clusterName=eks-cluster-jenkins \
        --set serviceAccount.create=false \
        --set serviceAccount.name=aws-load-balancer-controller \
        --set region=us-east-1 \
        --set vpcId=vpc-0e0b2b8f5ef39c553

    6.3- Instalar controlador con Helm (Opcional):
        helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=eks-cluster-ssm --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller --set vpcId=vpc-0e0b2b8f5ef39c553

        Reinstalar con el vpcid (opcional)
        helm upgrade aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=eks-cluster-jenkins --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller --set vpcId=vpc-062febe72f3049306

        El VPC-ID se puede obtener asi: 
        aws eks describe-cluster --name eks-cluster-jenkins --query "cluster.resourcesVpcConfig.vpcId" --output text

6- Validacion 
    6.1- Verifica los Pods y Deployments: Usa el siguiente comando para comprobar que el deployment del controlador esté activo y que los pods estén corriendo:
        kubectl get deployment -n kube-system aws-load-balancer-controller
        kubectl get pods -n kube-system

    6.2- Revisa los logs del controlador: Puedes revisar los logs del controlador para detectar posibles errores:
        kubectl logs -n kube-system deployment/aws-load-balancer-controller
    
    6.3 Instala nginx y valida que puedas llegar

7- Prueba simple instalando pod con un nginx (use esta guia de referencia: https://medium.com/@shivam77kushwah/integrate-application-load-balancer-with-aws-eks-using-aws-load-balancer-controller-7e9b7d178a79)
    7.1- Aplica el deployment de nginx
        kubectl apply -f nginx-deployment.yaml

    78.2- Aplica el service
        kubectl apply -f nginx-service.yaml

    7.3- Verifica que el servicio tiene external-ip asignada
        kubectl get svc nginx-service

    7.4- Crear ingress
        kubectl apply -f nginx-ingress.yaml
    
    7.5- Eliminar service en caso que sea necesario:
        kubectl delete svc nginx-service

    7.6- Una vez validado, hacer lo mismo pero con los archivos de jenkins-* (peudes eliminar los objetos K8S de nginx o probar con el main ingress)


####################################################################################
################## AHORA VIENE CONFIG EXCLUSIVA PARA JENKINS #######################
####################################################################################

8- Una vez instalado el pod de jenkins, el service y el ingress, entrar al pod y obtener la password que pide la 
primera vez que se accede a la URL del ALB que nos lleva a Jenkins.
    kubectl exec --namespace ops -it <nombre pod jenkins>  -- cat /var/jenkins_home/secrets/initialAdminPassword

    - Todos los pasos y troubleshootings aqui: https://chatgpt.com/share/67156938-dc0c-800a-a430-255667bff521